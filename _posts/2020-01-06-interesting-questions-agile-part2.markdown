---
layout: post
title:  "คำถามที่น่าสนใจในการนำแนวคิด Agile มาใช้ (Part 2)"
date:   2020-01-06 21:06:00 +0700
categories: agile
---

หลังจากที่ลองตอบคำถามมา 6 ข้อตาม[หลักการของ Agile 12 ข้อ](https://agilemanifesto.org/principles.html)

น่าจะเห็นอะไรจากคำตอบ ทั้งจากตัวเองและจากทีม

เหลืออีก 6 ข้อ มาต่อกันเลย

**ข้อที่ 7 ทีมของคุณสามารถบริหารจัดการเวลาให้เหมาะสมกับงานที่มีในวันนั้นๆ ได้หรือไม่**
- ทีมคุณสามารถทำงานโดยที่ไม่เกินเวลาได้หรือไม่
- มีช่วงเวลาให้ทีมของคุณได้ไปหาความรู้เพิ่มเติมหรือลองทำสิ่งใหม่ๆ บ้างหรือไม่
- สมาชิกให้เวลาส่วนใหญ่อยู่กับทีมของคุณใช่หรือไม่

**ข้อที่ 8 ทีมของคุณใส่ใจกับเรื่อง Technical Excellence มากแค่ไหน**
- Technical Debt เคยเอามาดู มาแก้บ้างไหม (*แล้วหนี้อะไรที่เราก่อขึ้นมาบ้างล่ะ*)
- Refactoring ทำบ้างไหม บ่อยแค่ไหน (*ก่อนอื่นต้องรู้ก่อนว่าอะไรคือ [Code Smell](https://martinfowler.com/bliki/CodeSmell.html)*)
- แต่ละวันระบบงานถูก Build กี่ครั้ง (*นี่มันสอดคล้องกับแนวคิด [CICD](https://www.thoughtworks.com/continuous-integration) นี่หน่า*)
- เขียนชุดการทดสอบบ้างไหม แล้วเป็น Automated หรือเปล่า
- เคยนำ Non-functional requirements เข้ามาอยู่ในการ Design บ้างหรือเปล่า

**ข้อที่ 9 ทีมของคุณเคยส่งมอบงานแบบอลังการงานสร้างโดยที่ยังไม่มีความต้องการ ณ ตอนนั้นบ้างหรือไม่**
- ถ้าทีมของคุณคิดว่าไม่สามารถส่งมอบงานตามที่ให้คำมั่นสัญญาไว้ สิ่งแรกที่ทำคืออะไร
- ความละเอียดของ Requirement ขึ้นอยู่กับว่างานนั้นใกล้จะเริ่มทำก่อนหรือหลัง
- ทีมของคุณสามารถเริ่มทำงานได้โดยที่ Requirement ยังไม่เสร็จได้หรือไม่
- โปรเจคไม่สามารถเริ่มได้ ถ้าไม่ได้ผ่านการทำ Technical Design ก่อน ใช่หรือไม่
- ก่อนเริ่มรอบการทำงานใหม่ เคยมีการวางแผนเมื่อดูความมั่นใจของทีมว่าสามารถทำงานเสร็จตามที่ได้ให้คำมั่นสัญญาบ้างไหม

**ข้อที่ 10 ความรับผิดชอบต่อการพัฒนา ดูแลรักษา ทดสอบ และส่งมอบเป็นของสมาชิกทุกคนในทีมใช่หรือไม่**
- ทีมของคุณได้นำการทดสอบแบบอัตโนมัติเข้ามาเป็นอย่างแรกๆ เลยหรือเปล่า
- งานที่เกี่ยวกับการดูแลรักษา Architechture เป็นหน้าที่ของ Architect หรือเปล่า
- คนที่ทำเป็นคนประเมินและประมาณงานหรือเปล่า

**ข้อที่ 11 ทีมเคยหยุดคิด วิเคราะห์ แยกแยะ และหาวิธีการที่จะพัฒนาและปรับปรุงอย่างต่อเนื่องบ้างไหม**
- นั่นรวมไปถึงการแบ่งเวลามาปรับปรุงจริงๆ ด้วยนะ

**ปิดท้ายด้วย Engineering practice ทีมของคุณเคยใช้...**
- Source code management
- Continuous Integration & Continuous Delivery
- Continuous Deployment
- Automated testing
- Test-driven development
- Cloud services (private หรือ public ก็ได้)
- Coding standards
- Development environment เหมือนหรือคล้ายกับ Production environment ไหม





